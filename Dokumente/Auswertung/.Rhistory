bV <- unlist(b[2])
}
else{
aV <- a
bV <- b
}
al <- length(aV)
bl <- length(bV)
r <- numeric(al+bl)
ai <- 1
bi <- 1
j <- 1
print(unlist(a[2]))
compares <- unlist(a[1]) + unlist(b[1])
while((ai <=al) && (bi <=bl)) {
if( aV[ai]< bV[bi] ) {
r[j] <- aV[ai]
ai <- ai+1
compares <- compares+1
} else {
r[j] <- bV[bi]
bi <- bi+1
compares <- compares+1
}
j <- j+1
}
if(ai<=al) r[j:(al+bl)] <- aV[ai:al]
else if(bi<=bl) r[j:(al+bl)] <- bV[bi: bl]
r2 <- list(compares, r)
names(r2) <- c("number","data")
return(r2)
}
mergesort <- function(x) {
l <- length(x)
if(l >1) {
p<- ceiling(l/2)
a <- mergesort(x[1:p])
b <- mergesort(x[(p+1):l])
return(mergelists(a,b))
}
return(x)
}
list1 <- c(11,10,9,15,6,12,17,8,19,7)
print(mergesort(list1))
q()
integrate(Verteilungsfunktion <- function(f,a,b) function(t) {
if(t < a) return(0)
if(t > b) return(1)
return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
f
Verteilungsfunktion
f
f(1)
F
F(seq(-0.4,1.4,0-2))
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {
if(t <= a) return(0)
if(t => b) return(1)
return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {
if(t <= a) return(0)
if(t => b) return(1)
return(Vectorize(integrate(f,a,t)$value))
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
Verteilungsfunktion <- function(f,a,b) function(t) {
if(t <= a) return(0)
if(t => b) return(1)
return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
Verteilungsfunktion <- function(f,a,b) function(t) {
if(t <= a) return(0)
if(t >= b) return(1)
return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
F(seq(-0.4,1.4,0.2))Verteilungsfunktion <- function(f,a,b) function(t) {
ifelse(t <= a,0,ifelse(t>=b,1,integrate(f,a,t)$value))
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
Verteilungsfunktion <- function(f,a,b) function(t) {
if(t <= a) return(0)
if(t >= b) return(1)
return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
F(0.2)
F(0.4)
F(0.5)
F(0.6)
F(0.7)
F(0)
F(1)
F(1.4)
Verteilungsfunktion <- function(f,a,b) function(t) {
print(t)
if(t <= a) return(0)
if(t >= b) return(1)
return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {
ifelse( t <= a, 0, ifelse( t >= b, 1, integrate(f,a,t)$value))
#if(t <= a) return(0)
#if(t >= b) return(1)
#return(integrate(f,a,t)$value)
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {
ifelse( t <= a, 0, ifelse( t >= b, 1, integrate(f,a,t)$value))
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {
ifelse( t <= a, 0, ifelse( t >= b, 1, integrate(Vecotrize(f),a,t)$value))
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {
ifelse( t <= a, 0, ifelse( t >= b, 1, integrate(Vectorize(f),a,t)$value))
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
Verteilungsfunktion <- function(f,a,b) function(t) {Vectorize(
ifelse( t <= a, 0, ifelse( t >= b, 1, integrate(f,a,t)$value)))
}
f <- function(x) 2*x
F <- Verteilungsfunktion(f,0,1)
F(seq(-0.4,1.4,0.2))
q()
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge])
data$Competence <- rowMeans(data[,competence])
data$Flow <- rowMeans(data[,flow])
data$Immersion <- rowMeans(data[,immersion])
data$NegEff <- rowMeans(data[,negEff])
data$PosEff <- rowMeans(data[,posEff])
data$Tension <- rowMeans(data[,tension])
data$Control <- rowMeans(data[,control])
setwd("~/GitHub/AndroidMathSnake/Dokumente/Auswertung")
install.packages("ggplot2")
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge])
data$Competence <- rowMeans(data[,competence])
data$Flow <- rowMeans(data[,flow])
data$Immersion <- rowMeans(data[,immersion])
data$NegEff <- rowMeans(data[,negEff])
data$PosEff <- rowMeans(data[,posEff])
data$Tension <- rowMeans(data[,tension])
data$Control <- rowMeans(data[,control])
setwd("~/GitHub/AndroidMathSnake/Dokumente")
setwd("~/GitHub/AndroidMathSnake/Dokumente/Auswertung")
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge])
data$Competence <- rowMeans(data[,competence])
data$Flow <- rowMeans(data[,flow])
data$Immersion <- rowMeans(data[,immersion])
data$NegEff <- rowMeans(data[,negEff])
data$PosEff <- rowMeans(data[,posEff])
data$Tension <- rowMeans(data[,tension])
data$Control <- rowMeans(data[,control])
library(ggplot2)
data <- read.csv("KategoriesPlot.csv",sep = ';')
View(data)
ggplot(data, aes(x = FirstGame, y = Tension, fill = FirstGame)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge])
data$Competence <- rowMeans(data[,competence])
data$Flow <- rowMeans(data[,flow])
data$Immersion <- rowMeans(data[,immersion])
data$NegEff <- rowMeans(data[,negEff])
data$PosEff <- rowMeans(data[,posEff])
data$Tension <- rowMeans(data[,tension])
data$Control <- rowMeans(data[,control])
library(ggplot2)
data <- read.csv("KategoriesPlot.csv",sep = ';')
View(data)
ggplot(data, aes(x = FirstGame, y = Tension, fill = FirstGame)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(Kategorie,Mean), fill=Kategorie, ylim(c(1:5)))  +  geom_boxplot(fatten=6,color=color.boxplot) +
stat_boxplot(geom ='errorbar') +
geom_hline(yintercept = 3, color=color.boxplot_mean, size=1.5)  +
scale_x_discrete("Subscales of the Game Experience Questionnaire (GEQ)") +
theme_gray(base_size = 45) +
theme(axis.text.x=element_text(angle =22.5, hjust = 1)) + scale_y_continuous(name="Rating")
ggplot(data, aes(Kategorie,Mean), fill=Kategorie, ylim(c(1:5)))  +  geom_boxplot(fatten=6) +
stat_boxplot(geom ='errorbar') +
geom_hline(yintercept = 3, size=1.5)  +
scale_x_discrete("Subscales of the Game Experience Questionnaire (GEQ)") +
theme_gray(base_size = 45) +
theme(axis.text.x=element_text(angle =22.5, hjust = 1)) + scale_y_continuous(name="Rating")
ggplot(data, aes(Kategorie,Mean), fill=Kategorie, ylim(c(1:3)))  +  geom_boxplot(fatten=6) +
stat_boxplot(geom ='errorbar') +
geom_hline(yintercept = 3, size=1.5)  +
scale_x_discrete("Subscales of the Game Experience Questionnaire (GEQ)") +
theme_gray(base_size = 45) +
theme(axis.text.x=element_text(angle =22.5, hjust = 1)) + scale_y_continuous(name="Rating")
data[,Kategorie = tension]
data[,Kategorie = Tension]
data[,Kategorie]
ggplot(data, aes(x = Kategorie)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
#facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = User)) +
#facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = User)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Mean, y = Kategorie)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = User)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_wrap(~ Game) +
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
geom_line(yintercept = 3, size=1.5)+
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
geom_hline(yintercept = 3, size=1.5)+
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(Kategorie,Mean), fill=Kategorie, ylim(c(1:3)))  +  geom_boxplot(fatten=6) +
stat_boxplot(geom ='errorbar') +
#geom_hline(yintercept = 3, size=1.5)  +
scale_x_discrete("Subscales of the Game Experience Questionnaire (GEQ)") +
theme_gray(base_size = 45) +
theme(axis.text.x=element_text(angle =22.5, hjust = 1)) + scale_y_continuous(name="Rating")
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge])
data$Competence <- rowMeans(data[,competence])
data$Flow <- rowMeans(data[,flow])
data$Immersion <- rowMeans(data[,immersion])
data$NegEff <- rowMeans(data[,negEff])
data$PosEff <- rowMeans(data[,posEff])
data$Tension <- rowMeans(data[,tension])
data$Control <- rowMeans(data[,control])
ggplot(data, aes(x = FirstGame, y = Tension, fill = FirstGame)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge], na.rm = TRUE)
data$Competence <- rowMeans(data[,competence], na.rm = TRUE)
data$Flow <- rowMeans(data[,flow], na.rm = TRUE)
data$Immersion <- rowMeans(data[,immersion], na.rm = TRUE)
data$NegEff <- rowMeans(data[,negEff], na.rm = TRUE)
data$PosEff <- rowMeans(data[,posEff], na.rm = TRUE)
data$Tension <- rowMeans(data[,tension], na.rm = TRUE)
data$Control <- rowMeans(data[,control], na.rm = TRUE)
ggplot(data, aes(x = FirstGame, y = Tension, fill = FirstGame)) +
facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = FirstGame, y = Tension, fill = FirstGame)) +
#facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Game, y = Tension, fill = FirstGame)) +
#facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Game, y = Tension)) +
#facet_wrap(~ Game) +
theme_bw() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
data <- read.csv("KategoriesPlot.csv",sep = ';')
View(data)
data$Mean <- as.factor(data$Mean)
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
data <- read.csv("KategoriesPlot.csv",sep = ';')
View(data)
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot() +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean)) +
facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = interaction(Kategorie, Game), y = Mean)) +
facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = interaction(Kategorie, Game), y = Mean)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = interaction(Kategorie, Game), y = Mean)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "identity") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = interaction(Kategorie, Game), y = Mean)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "identity",0,4,0,4) +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = interaction(Kategorie, Game), y = Mean, fill= Game)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "identity") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = interaction(Kategorie, Game), y = Mean, fill= Game)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean, fill= Game)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
data <- read.csv("DatenTab.csv",sep = ';')
View(data)
challenge <- c('F9', 'F10', 'F17')
competence <- c('F2', 'F11', 'F12')
flow <- c('F5', 'F8', 'F20')
immersion <- c('F4', 'F15', 'F21')
negEff <- c('F3', 'F6', 'F16')
posEff <- c('F1', 'F13', 'F14')
tension <- c('F7', 'F18', 'F19')
control <- c('F22')
data$Challenge <- rowMeans(data[,challenge], na.rm = TRUE)
data$Competence <- rowMeans(data[,competence], na.rm = TRUE)
data$Flow <- rowMeans(data[,flow], na.rm = TRUE)
data$Immersion <- rowMeans(data[,immersion], na.rm = TRUE)
data$NegEff <- rowMeans(data[,negEff], na.rm = TRUE)
data$PosEff <- rowMeans(data[,posEff], na.rm = TRUE)
data$Tension <- rowMeans(data[,tension], na.rm = TRUE)
data$Control <- rowMeans(data[,control], na.rm = TRUE)
data <- read.csv("KategoriesPlot.csv",sep = ';')
View(data)
ggplot(data, aes(x = Kategorie, y = Mean, fill= Game)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
library(ggplot2)
data <- read.csv("KategoriesPlot2.csv",sep = ';')
View(data)
ggplot(data, aes(x = Kategorie, y = Mean, fill= Game)) +
#facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_classic() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
ggplot(data, aes(x = Kategorie, y = Mean, fill= Game)) +
facet_grid(~ Game) +
#geom_hline(yintercept = 3, size=1.5) +
theme_bw() +
geom_boxplot(stat = "boxplot") +
labs( y = 'Rating', x = 'Perspektive', title= 'Tension')
